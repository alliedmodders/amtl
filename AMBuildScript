# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os
import sys

class KEConfig(object):
  def __init__(self):
    pass

  def configure(self):
    cfg = builder.DetectCompilers()
    cxx = cfg.cxx

    if cfg.version < 'clang-3.0' or cfg.version < 'apple-clang-3.0':
      raise Exception('AMTL requires clang 3.0 or higher.')
    if cfg.version < 'gcc-4.5':
      raise Exception('AMTL requires GCC 4.5 or higher.')
    if cfg.version < 'msvc-1600':
      raise Exception('AMTL requires Visual Studio 2010 (CL 16.00) or higher.')

    if cxx.like('gcc'):
      if builder.target_platform != 'windows':
        if cxx.name == 'gcc':
          if cxx.version >= '4.9':
            cfg.cxxflags += ['-std=c++14']
          elif cxx.version >= '4.7':
            cfg.cxxflags += ['-std=c++11']
          elif cxx.version >= '4.3':
            cfg.cxxflags += ['-std=c++0x']
        else:
          if cxx.version >= '3.5':
            cfg.cxxflags += ['-std=c++14']
          elif cxx.version >= '3.3':
            cfg.cxxflags += ['-std=c++1y']
          else:
            cfg.cxxflags += ['-std=c++11']

        cfg.defines += [
          'stricmp=strcasecmp',
          '_stricmp=strcasecmp',
          '_snprintf=snprintf',
          '_vsnprintf=vsnprintf',
        ]
        cfg.linkflags += ['-lpthread']
        if builder.target_platform != 'mac':
          cfg.linkflags += ['-lrt']
      else:
        cfg.cxxflags += [
          '-std=c++14',
          '-fms-compatibility-version=19',
        ]

      cfg.cflags += [
        '-pipe',
        '-Wall',
        '-Werror',
      ]

      have_gcc = cxx.name == 'gcc'
      have_clang = cxx.name == 'clang'
      if have_clang or (have_gcc and cxx.majorVersion >= 4):
        cfg.cflags += ['-fvisibility=hidden']
        cfg.cxxflags += ['-fvisibility-inlines-hidden']
        # -Wunused-function breaks test_flags.cpp
        cfg.cxxflags += ['-Wno-unused-function']
      if have_clang:
        cfg.cxxflags += ['-Wno-implicit-exception-spec-mismatch']

      cfg.cxxflags += [
        '-fno-exceptions',
        '-fno-threadsafe-statics',
      ]

      if have_gcc:
        cfg.cflags += ['-mfpmath=sse']
    elif cxx.name == 'msvc':
      if builder.options.debug == '1':
        cfg.cflags += ['/MTd']
        cfg.linkflags += ['/NODEFAULTLIB:libcmt']
      else:
        cfg.cflags += ['/MT']
      cfg.defines += [
        '_CRT_SECURE_NO_DEPRECATE',
        '_CRT_SECURE_NO_WARNINGS',
        '_CRT_NONSTDC_NO_DEPRECATE',
        '_ITERATOR_DEBUG_LEVEL=0',
      ]
      cfg.cflags += [
        '/W3',
      ]
      cfg.cxxflags += [
        '/EHsc',
        '/GR-',
        '/TP',
      ]
      cfg.linkflags += [
        '/MACHINE:X86',
        'kernel32.lib',
        'user32.lib',
        'gdi32.lib',
        'winspool.lib',
        'comdlg32.lib',
        'advapi32.lib',
        'shell32.lib',
        'ole32.lib',
        'oleaut32.lib',
        'uuid.lib',
        'odbc32.lib',
        'odbccp32.lib',
      ] 

    # Optimization
    if builder.options.opt == '1':
      cfg.defines += ['NDEBUG']
      if cxx.like('gcc'):
        cfg.cflags += ['-O3']
      elif cxx.like('msvc'):
        cfg.cflags += ['/Ox']
        cfg.linkflags += ['/OPT:ICF', '/OPT:REF']

    # Debugging
    if builder.options.debug == '1':
      cfg.defines += ['DEBUG', '_DEBUG']
      if cxx.like('msvc'):
        cfg.cflags += ['/Od', '/RTC1']
        if cxx.version >= 1600:
          cfg.cflags += ['/d2Zi+']

    # This needs to be after our optimization flags which could otherwise disable it.
    if cxx.name == 'msvc':
      # Don't omit the frame pointer.
      cfg.cflags += ['/Oy-']

    # Platform-specifics
    if builder.target_platform == 'linux':
      cfg.defines += ['_LINUX', 'POSIX']
      if cxx.name == 'gcc':
        cfg.linkflags += ['-static-libgcc']
      elif cxx.name == 'clang':
        cfg.linkflags += ['-lgcc_eh']
    elif builder.target_platform == 'mac':
      cfg.defines += ['OSX', '_OSX', 'POSIX']
      cfg.cflags += ['-mmacosx-version-min=10.5']
      cfg.linkflags += [
        '-mmacosx-version-min=10.5',
        '-lstdc++',
        '-stdlib=libstdc++',
      ]
      cfg.cxxflags += ['-stdlib=libstdc++']
    elif builder.target_platform == 'windows':
      cfg.defines += ['WIN32', '_WINDOWS']

  def Program(self, context, name):
    compiler = context.compiler.clone()
    binary = compiler.Program(name)
    return binary

KE = KEConfig()
KE.configure()

builder.RunBuildScripts(
  [
    'tests/AMBuild.tests',
  ],
  {
    'KE': KE,
  }
)
